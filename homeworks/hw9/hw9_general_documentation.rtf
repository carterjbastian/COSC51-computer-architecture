{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 HW9 General Documentation
\b0 \
\
The foundation for all of my cache simulations is the virtual_cache.h header file. This file defines various struct types including virtual_cache, cache_line, and trace_counter. The virtual_cache type consists of information about the type of cache we're modeling and an array of cache_line objects. Each cache_line object consists of a valid_bit (implemented as an unsigned char set to 0x0 or 0x1) and a 32-bit tag (implemented as an unsigned int). There are various functions in this file that make it possible to abstract all of the functionalities needed to simulate cache behavior given only the E and S cache parameters and a memory trace. The most notable of these functions is the parse_mem_req function, which actually interprets a single address from a memory trace with respect to a particular virtual_cache structure.\
\
For more documentation, see inline comments in the code and the more specific documentation and testing files presented with each question. }