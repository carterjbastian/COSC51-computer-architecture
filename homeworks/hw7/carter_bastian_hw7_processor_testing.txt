{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 HW7 Processor Testing:
\b0 \
\
In order to thoroughly test the processor, I split testing up into 6 groups which tested groups of functionalities. I'll explain each briefly below. The functionality groups build on each other and were thus tested in the order that follows.\
\
\ul Test1: Basics\ulnone \

\i Description:
\i0 \
This test just checks that the FSM works right with the assembly code => hex => instruction set up. This was mostly for my own sake (so I could see how the process works).\
\

\i Intended Results:
\i0 \
- %eax <- 0xdeadbeef\
- %ebx <- 0xcafefeed\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \ul \ulc0 Test2: Moving Data: \ulnone \

\i Description:
\i0 \
Tests non-conditional moves (immediate-to-register, register-to-memory, memory-to-register, and register-to-register). I found that I was doing fine with moves that didn't involve memory, so I ended up making a more specific test, mem_work.ys, so that I could step through the memory instructions individually. I did end up finding the bug.\
\

\i Intended Results:
\i0 \
- %eax 	<- 	3\
- %ebx 	<- 	0x10c\
- %ecx 	<- 	-1\
- %edx	<-	-1\
- %edi 	<-  	3\
- %esi 	<-	3\
\
- M[0x10c]	<-	0xfffffffff\
- M[0x110]	<-	3\
\
\
\ul Test3 \'96 Operations and conditional moving: \ulnone \

\i Description:
\i0 \
Tested that the 4 OP instructions worked correctly and that the conditional moves worked as intended.\
\

\i Intended Results:\

\i0 \
-M[0x11c]		<-	0x1\
-M[0x120]		<-	0x1\
-M[0x124]		<-	0x1\
-M[0x128]		<-	0x1\
\
- M[0x12c]		<-	0xffffffff\
\
- M[0x130]		<-	0x10\
- M[0x134]		<-	0xe\
- M[0x138]		<-	0x1\
- M[0x13c]		<-	0xe\
\
\
\ul Test4 \'96 Pushing and Popping: \ulnone \

\i Description:
\i0 \
Tests pushl, popl, and nop.\
\

\i Intended Results:
\i0 \
- %ecx		<-	0xdeadbeef\
- %eax		<-	0xfeedcafe\
- %esp		<-	0x10c\
\
- M[0x108]		<-	0xfeedcafe\
- M[0x104]		<-	0xdeadbeef\
\
\
\ul Test5 \'96 Control Flow: \ulnone \

\i Description:
\i0 \
Tests jxx, call, and ret. Note that I found some bugs in my call and return functionality because I wasn't properly updating the PC register with valM. I tracked down this bug and fixed it via debugging_call_ret.ys.\
\

\i Intended Results:
\i0 \
- %ebp 		<- 	0x1 (indicates jumping tests were successful)\
- %eax		<-	0x1 (indicates we made it to the end of our call & return testing)\
- %esp		<-	0x300 (indicates we updated stack pointer successfully throughout)\
\
- M[0x300]		<-	0xffffffff\
- M[0x304]		<-	0xdeadbeef\
- M[0x308]		<-	0xcafefeed\
- M[0x30c]		<-	0xabaddad\
- M[0x310]		<-	0xbeefface\
\
\
\ul Test6 - IO: \ulnone \

\i Description:
\i0 \
Tests the ability to read from memory mapped registers and write to DDR / TTY output.\
Full disclosure, I found a bug in the IO interactions that I haven't been able to track down. If you have lots of characters in the Keyboard buffer and continuously loop between checking KBSR / reading KBDR / Writing KBDR contents to DDR (as per looper.ys), the TTY output ends up being every other letter you had in the keyboard register. I got this result with both my IO circuit and the sample IO circuit given to us and haven't yet been able to solve it. That said, I'm hereby documenting that users of the KBD / TTY interaction shouldn't input a character to the keyboard until the previous one has been clocked on to the TTY. This will make the system work.\
\

\i Intended Results:
\i0 \
"abc" written in the TTY.}