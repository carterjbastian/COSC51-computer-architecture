{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 HW8 Q1 Testing and Documentation:
\b0 \
\
\ul Documentation:\ulnone \
I'll go through my implementation of each new instruction individually. In general, I tried to avoid modifying the FSM hardware and opted instead to just do some fancy footwork with the control states instead.\
\
Also, a general note: I modified the control_ROM.hex file by hand to account for these new instructions since I'm using Apple's Numbers software instead of Excel (the conversion is messy and the fsm2hex tool doesn't work on my spreadsheets). I also opted to use my solution for HW7 instead of the HW7 Sample provided. Having extensively tested my solution, I just feel like I knew it better and had better confidence in my knowledge of how it works.\
\

\i I. shr rA, rB
\i0 \
For this instruction, I chose a machine encoding of 0x[c][4] [rA][rB]\
This is a 2-byte instruction, and the opcode of 4 specifies a right shift operation. I added this functionality to the ALU by adding a 32-bit shifter sub-circuit which uses splitters to shift a 32-bit value one bit to the right. Note that, because 4 is the greatest semantically meaningful ALU opcode, any opcode which with the third bit as a 1 is interpreted as a shr op. This would need to be modified if we were to add more operations.\
\
I also had to add a second multiplexer to allow for this new possible output in a way that wouldn't interfere with other functionalities.\

\i \

\i0 In the spreadsheet you can see that the 
\i shr
\i0  instruction is encoded to move to the TOP state immediately after completion. In the fetch stage, we encode it to set valP as PC + 2. In the decode stage, we select srcA to be R[rA], and we write back dstE to rB. In the execute stage, the ALU uses the opcode of 4 to select the shift-right operation and the PC is updated. This operation doesn't involve memory.\
\
\

\i II. addi val, rA
\i0 \
For this instruction, I chose a machine encoding of 0x[d][0] [f][rA] [valC (4 bytes)]\
This is a 6-byte instruction.\
\
I did not need to modify the DPath for this.\
\
In the spreadsheet, you can see that the 
\i addi 
\i0 instruction is encoded to move to the TOP state immediately after completion. In the fetch stage, valP is set to PC + 2. In decode, we set valB to R[rB]. In the execute stage, we set valE to valB + valC and set the condition code. We do not work with memory for this instruction. In the write-back stage, we set R[rB] to valE (with dstEsel and dstEreq). Finally, we set PC to valP.\
\
\

\i III. addm D(rA), rB
\i0 \
For this instruction, I chose a machine encoding of -x[e][0] [rA][rB] [valC (4 bytes)]\
This is a 6-byte instruction.\
\
I had to make slight modifications to the DPath for this. Namely, I added another multiplexer between the aluBsel multiplexer and ALU srcB input. This multiplexer makes it so that srcB is valC if and only if we are using the addm instruction (AKA the iCode == e) and we are not addm helper stage 2 (see below) (AKA ldCC != 1). This makes it so that we can add valC to R[rA] in the first state of the addm instruction.\
\
In the spreadsheet, you can see that the addm instruction is divided into 3 separate states (AKA 3 clock cycles + the TOP state):\
\
1. addm = 111110\
This state retrieves the data stored at memory address (D + R[rA]) and stores the value in rA. It does so by adding valC and R[rA] in the execute stage, specifying valE as the memory address is the Memory stage, and specifying that we want to write valM back to register rA. Once DMemReady is asserted, it specifies the next state to be "addm helper-state 1". This does not increment the PC counter.\
\
2. addm helper-state 1 = 000003\
This helper-state just performs the write back of valM to rA. Without this state, valM wouldn't get clocked into rA properly. This then specifies that want to immediately move to the next state of "addm helper-state 2".\
\
3. addm helper-state 2 = 000004\
This helper-state is essentially a copy of the 
\i addl
\i0  instruction \'96 now that M[D + R[rA]] (AKA valA) is in rA, and valB is still in R[rB], we just do what 
\i addl 
\i0 does by adding rA and rB and storing the result in rB. The only difference between the two states is that this state needs to increment the PC by 6 (while 
\i addl / opl
\i0  only needs to increment the PC by 2). This state the specifies an immediate move to the TOP state.\
\
USER WARNING: let the user (and instructor/grader) beware that this instruction overwrites the value previously held in rA. In order to assure that the value is the same before and after the instruction, be sure to push rA before using 
\i addm
\i0  and then pop it afterwards. See my testing for an example of this. I recognize that I could have added states to protect the rA value, but since the instructions didn't specify a need for this, I'm just documenting the behavior instead of going overboard on defensive implementation.\
\
\
\ul Testing:\ulnone \
\
For testing, I wrote three .ys files of assembly code (with filler-instructions of the same machine instruction length) and then modified the respective .yo files by hand to replace the filler-instructions with the intened new instructions). Finally, I converted the .yo files to .hex files, loaded them into my first RAM module, and enabled the ticks to go until the halt state was reached. I then analyzed the registers to check for the success indicators (usually %edi and %esi). If a success indicator showed a result that wasn't 0x1, I revisted the .ys code to debug my commands / my assembly code.\
\
In shr_test.ys/.yo/.hex I made a program to test that the 
\i shr
\i0  instruction works and produces the correct value in the correct location and sets the CC appropriately. The two tests are not comprehensive of all cases, but are sufficient to show that the instruction works in general. Values of 0x1 in both %edi and %esi upon the shr_test program halting indicates the instruction's successful behavior.\
\
In addi_test.ys/.yo/.hex I made a program to test that the 
\i addi
\i0  instruction works and produces correct values stored in the correct register, while setting the CC appropriately. As with shr_test, the test cases are not meant to be comprehensive but to show generally proper behavior, and values of 0x1 in both %edi and %esi upon the program's halting indicates the instruction's successful behavior.\
\
In addm_test.ys/.yo/.hex I made a program to test that the 
\i addm
\i0  instruction works and produces correct values stored in the correct register, while setting the CC appropriately and working with memory correctly. As with the other tests, the test cases are not meant to be comprehensive but to show generally proper behavior, and values of 0x1 in both %edi and %esi upon the program's halting indicates the instruction's successful behavior. Also note that I pushed the value of %ebx before calling addm (%ebx), %ecx and popped the value back into %ebx afterwards (as-per my documented instruction usage warning above).\
}