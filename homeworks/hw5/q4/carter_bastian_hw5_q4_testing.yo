                      | # CS51 HW5 Q4, Carter Bastian
                      | 
                      | # Execution starts at address 0
  0x000:              | .pos 0
                      | 
  0x000:              | output: # Default output is 0x0e => if something goes wrong, we know
  0x000: 0e000000     |         .long 0x0e
                      | 
  0x004:              | init:
  0x004: 30f400050000 |         irmovl stack, %esp    # set up stack pointer
  0x00a: 801c000000   |         call main             # Execute the main program
                      | 
                      |         # put the output in edx (for testing)
  0x00f: 30f700000000 |         irmovl output, %edi
  0x015: 502700000000 |         mrmovl (%edi), %edx
                      |  
  0x01b: 00           |         halt                  # Terminate the program
                      | 
  0x01c:              | main:
  0x01c: 30f062020000 |         irmovl end_pointer, %eax
  0x022: 404000000000 |         rmmovl %esp, (%eax) # Save the end pointer
                      | 
  0x028: 30f260020000 |         irmovl input, %edx
  0x02e: 500200000000 |         mrmovl (%edx), %eax   # Month BCD in %eax
  0x034: 501201000000 |         mrmovl 1(%edx), %ecx  # Day BCD in %ecx
                      | 
                      |         # Fix the BCDs so they only have their last two bits
  0x03a: 30f3ff000000 |         irmovl $0x000000ff, %ebx
  0x040: 6230         |         andl %ebx, %eax
  0x042: 6231         |         andl %ebx, %ecx
                      | 
                      |         # Convert the month into a hex value from a BCD
  0x044: a01f         |         pushl %ecx # We only care about %ecx, -> caller-saving
  0x046: 800f010000   |         call convert_bcd
  0x04b: 2001         |         rrmovl %eax, %ecx
  0x04d: b00f         |         popl %eax
  0x04f: a01f         |         pushl %ecx # save hex month value
  0x051: 800f010000   |         call convert_bcd
  0x056: b01f         |         popl %ecx # retrieve hex month value
                      | 
                      |         # Now %eax contains the hex value of the day
                      |         # and %ecx containt the hex value of the month
                      | 
                      |         # Go month-by-month to test for each case
                      |         # month = 0 -> false output
  0x058: 30f700000000 |         irmovl $0, %edi
  0x05e: 6117         |         subl %ecx, %edi
  0x060: 731d020000   |         je false_out
                      | 
                      |         # month = 1 -> Jan -> 31-day-month
  0x065: 30f701000000 |         irmovl $1, %edi
  0x06b: 6117         |         subl %ecx, %edi
  0x06d: 73ad010000   |         je parse_31_day_month 
                      | 
                      |         # month = 2 -> feb -> 28-day-month
  0x072: 30f702000000 |         irmovl $2, %edi
  0x078: 6117         |         subl %ecx, %edi
  0x07a: 73e3010000   |         je parse_28_day_month
                      | 
                      |         # month = 3 -> March -> 31-day-month
  0x07f: 30f703000000 |         irmovl $3, %edi
  0x085: 6117         |         subl %ecx, %edi
  0x087: 73ad010000   |         je parse_31_day_month
                      |  
                      |         # month = 4 -> April -> 30-day-month
  0x08c: 30f704000000 |         irmovl $4, %edi
  0x092: 6117         |         subl %ecx, %edi
  0x094: 73c8010000   |         je parse_30_day_month
                      | 
                      |         # month = 5 -> May -> 31-day-month 
  0x099: 30f705000000 |         irmovl $5, %edi
  0x09f: 6117         |         subl %ecx, %edi
  0x0a1: 73ad010000   |         je parse_31_day_month
                      | 
                      |         # month = 6 -> June -> 30-day-month
  0x0a6: 30f706000000 |         irmovl $6, %edi
  0x0ac: 6117         |         subl %ecx, %edi
  0x0ae: 73c8010000   |         je parse_30_day_month
                      | 
                      |         # month = 7 -> July -> 31-day-month
  0x0b3: 30f707000000 |         irmovl $7, %edi
  0x0b9: 6117         |         subl %ecx, %edi
  0x0bb: 73ad010000   |         je parse_31_day_month
                      | 
                      |         # month = 8 -> August -> 31-day-month
  0x0c0: 30f708000000 |         irmovl $8, %edi
  0x0c6: 6117         |         subl %ecx, %edi
  0x0c8: 73ad010000   |         je parse_31_day_month
                      | 
                      |         # month = 9 -> September -> 30-day-month
  0x0cd: 30f709000000 |         irmovl $9, %edi
  0x0d3: 6117         |         subl %ecx, %edi
  0x0d5: 73c8010000   |         je parse_30_day_month
                      | 
                      |         # month = 10 -> October -> 31-day-month
  0x0da: 30f70a000000 |         irmovl $0xa, %edi
  0x0e0: 6117         |         subl %ecx, %edi
  0x0e2: 73ad010000   |         je parse_31_day_month
                      | 
                      |         # month = 11 -> November -> 30-day-month
  0x0e7: 30f70b000000 |         irmovl $0xb, %edi
  0x0ed: 6117         |         subl %ecx, %edi
  0x0ef: 73c8010000   |         je parse_30_day_month
                      | 
                      |         # month = 12 -> December -> 31-day-month
  0x0f4: 30f70c000000 |         irmovl $0xc, %edi
  0x0fa: 6117         |         subl %ecx, %edi
  0x0fc: 73ad010000   |         je parse_31_day_month
                      | 
                      |         # month >= 13 -> false_out
  0x101: 30f70d000000 |         irmovl $0xd, %edi
  0x107: 6117         |         subl %ecx, %edi
  0x109: 711d020000   |         jle false_out
                      | 
                      |        
  0x10e: 90           |         ret
                      | 
                      | 
                      | 
  0x10f:              | convert_bcd:  # Converts a 1-byte BCD in %eax to a hex value
                      | 
                      |         # figure out the 10's digit and save it in %edx
  0x10f: 30f1f0000000 |         irmovl $0xf0, %ecx
  0x115: 6201         |         andl %eax, %ecx # Register %ecx contains the 10's value isolated
                      |         
  0x117: 30f7a0000000 |         irmovl $0xa0, %edi    # For comparison
  0x11d: 6117         |         subl %ecx, %edi       # Is our 10's digit less than 10?
  0x11f: 713c020000   |         jle error_out         # If not, error
                      | 
  0x124: 30f740000000 |         irmovl $0x40, %edi    
  0x12a: 6117         |         subl %ecx, %edi       # Is our 10's digit less than 4?
  0x12c: 711d020000   |         jle false_out         # If not, false output
                      | 
                      |         # Check each of the remaining cases for the 10's digit
                      |         # i.e. if BCD 10's digit = 3, %edx <- 0x3
  0x131: 30f730000000 |         irmovl $0x30, %edi
  0x137: 30f303000000 |         irmovl $0x3, %ebx
  0x13d: 6117         |         subl %ecx, %edi
  0x13f: 2332         |         cmove %ebx, %edx
                      | 
  0x141: 30f720000000 |         irmovl $0x20, %edi
  0x147: 30f302000000 |         irmovl $0x2, %ebx
  0x14d: 6117         |         subl %ecx, %edi
  0x14f: 2332         |         cmove %ebx, %edx
                      |         
  0x151: 30f710000000 |         irmovl $0x10, %edi
  0x157: 30f301000000 |         irmovl $0x1, %ebx
  0x15d: 6117         |         subl %ecx, %edi
  0x15f: 2332         |         cmove %ebx, %edx
                      | 
  0x161: 30f700000000 |         irmovl $0x0, %edi
  0x167: 30f300000000 |         irmovl $0x0, %ebx
  0x16d: 6117         |         subl %ecx, %edi
  0x16f: 2332         |         cmove %ebx, %edx
                      | 
                      |         # Now, %edx contains the 10's value of the BCD
                      |         # %eax still has the original value of the BCD
                      |         # Now Store the 1's value of the BCD into %ebx
  0x171: 30f30f000000 |         irmovl $0x0f, %ebx
  0x177: 6203         |         andl %eax, %ebx # %ebx now has only the 1's decimal value
                      | 
                      |         # Test for bad BCD
  0x179: 30f70a000000 |         irmovl $0x0a, %edi    # For comparison
  0x17f: 6137         |         subl %ebx, %edi       # Is our 1's digit less than 10?
  0x181: 713c020000   |         jle error_out         # If not, error
                      | 
                      |         # Not we have our 10's decimal in %edx and our 1's decimal in %ebx
                      |         # We'll sum them up in %eax
  0x186: 30f000000000 |         irmovl $0, %eax       # Sum <- 0
  0x18c: 30f10a000000 |         irmovl $0xa, %ecx     # Adding 10 for each 10's decimal
  0x192: 30f7ffffffff |         irmovl $-1, %edi      # Decrementing the 10's index by 1
                      | 
                      |         # %eax = sum, %edx = 10's dec., %ebx = 1's dec.
                      |         # %ecx = 10 (sum increment), %edi = -1 (10's index decrement)
  0x198:              | loop:
  0x198: 2026         |         rrmovl %edx, %esi
  0x19a: 6066         |         addl %esi, %esi
  0x19c: 73aa010000   |         je loop_done
  0x1a1: 6010         |         addl %ecx, %eax   # Add 10 to sum
  0x1a3: 6072         |         addl %edi, %edx   # Decrement 10's index
  0x1a5: 7098010000   |         jmp loop
                      | 
  0x1aa:              | loop_done:        
  0x1aa: 6030         |         addl %ebx, %eax   # Account for the 1's decimal
  0x1ac: 90           |         ret               # Return with hex value of BCD in %eax
                      | 
                      | # Assumes hex value of the day is in register %eax
                      | # and that the month value encodes a 31-day month
  0x1ad:              | parse_31_day_month:
                      |         # If day = 0, false_out
  0x1ad: 2007         |         rrmovl %eax, %edi
  0x1af: 6077         |         addl %edi, %edi
  0x1b1: 731d020000   |         je false_out
                      | 
                      |         # If day > 31, false_out
  0x1b6: 30f71f000000 |         irmovl $31, %edi
  0x1bc: 6107         |         subl %eax, %edi # %ecx = %ecx - %eax
  0x1be: 721d020000   |         jl false_out
                      | 
                      |         # Otherwise, we're good, so true_out
  0x1c3: 70fe010000   |         jmp true_out
                      | 
  0x1c8:              | parse_30_day_month:
                      |         # If day = 0, false_out
  0x1c8: 2007         |         rrmovl %eax, %edi
  0x1ca: 6077         |         addl %edi, %edi
  0x1cc: 731d020000   |         je false_out
                      | 
                      |         # If day > 30, false out
  0x1d1: 30f71e000000 |         irmovl $30, %edi
  0x1d7: 6107         |         subl %eax, %edi
  0x1d9: 721d020000   |         jl false_out
                      | 
                      |         # Otherwise, we're good, so true_out
  0x1de: 70fe010000   |         jmp true_out
                      | 
  0x1e3:              | parse_28_day_month:
                      |         # If day= 0, false_out
  0x1e3: 2007         |         rrmovl %eax, %edi
  0x1e5: 6077         |         addl %edi, %edi
  0x1e7: 731d020000   |         je false_out
                      | 
                      |         # If day > 28, false_out
  0x1ec: 30f71c000000 |         irmovl $28, %edi
  0x1f2: 6107         |         subl %eax, %edi
  0x1f4: 721d020000   |         jl false_out
                      | 
                      |         # Otherwise, we're good, so true_out
  0x1f9: 70fe010000   |         jmp true_out
                      | 
  0x1fe:              | true_out:
  0x1fe: 30f001000000 |         irmovl $0x01, %eax
  0x204: 30f300000000 |         irmovl output, %ebx
  0x20a: 400300000000 |         rmmovl %eax, (%ebx)
                      | 
                      | 
  0x210: 30f362020000 |         irmovl end_pointer, %ebx
  0x216: 504300000000 |         mrmovl (%ebx), %esp
  0x21c: 90           |         ret
                      | 
  0x21d:              | false_out:
  0x21d: 30f000000000 |         irmovl $0x00, %eax
  0x223: 30f300000000 |         irmovl output, %ebx
  0x229: 400300000000 |         rmmovl %eax, (%ebx)
                      | 
  0x22f: 30f362020000 |         irmovl end_pointer, %ebx
  0x235: 504300000000 |         mrmovl (%ebx), %esp
  0x23b: 90           |         ret
                      | 
                      | 
  0x23c:              | error_out:
  0x23c: 30f00e000000 |         irmovl $0x0e, %eax
  0x242: 30f300000000 |         irmovl output, %ebx
  0x248: 400300000000 |         rmmovl %eax, (%ebx)
                      |  
  0x24e: 30f362020000 |         irmovl end_pointer, %ebx
  0x254: 504300000000 |         mrmovl (%ebx), %esp
  0x25a: 90           |         ret
                      | 
                      | 
  0x260:              | .align 16
  0x260:              | input:  # Asking about "April 20"
  0x260: 04           |         .byte 0x04
  0x261: 20           |         .byte 0x20
                      | 
                      | 
  0x262:              | end_pointer:
  0x262: 00000000     |         .long 0x00
                      | 
  0x500:              | .pos 0x500
  0x500:              | stack:
  0x500: ffffffff     |         .long 0xffffffff 
