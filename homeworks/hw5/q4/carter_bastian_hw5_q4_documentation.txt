{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 HW5 Q4 Testing and Documentation
\b0 \
\

\i \ul Strategy:
\i0 \ulnone \
\
The "init" sub-routine starts the program off by setting up the stack and calling the "main" program.\
\
The "main" program starts by retrieving the input from the memory and isolating ONLY the BCDs in question in the least significant bytes of their respective registers (Month BCD -> %eax, Day BCD -> %ecx). It then calls the "convert_bcd" subroutine to change each BCD into its appropriate hex value (eg. 0x10 => 0x0a). \
\
Once we've converted our BCDs into hex values, we assign %eax to the hex value for the day and %ecx to the hex value for the month. We then go month-by-month, testing each possible case of month value (0, 1-12, and 13+). Each possible (valid) case of month then redirects to the appropriate sub-routine ("parse_31_day_month", "parse_30_day_month", and "parse_28_day_month"). These check if the day-value in %eax is valid for the type of month and redirect to the appropriate "end-subroutine".\
\
There are three "end-subroutines" \'96 "true_out", "false_out", and "error_out". Each writes the appropriate value to the "output" value in memory (0x1, 0x0, and 0xe respectively), and uses the "end_pointer" stored in memory to skip the values on the stack and return straight to the "init" program (AKA returning from the "main" program"). This then assigns the error output value to the %edx register (just for the sake of testing so we can immediately see whether or not the output is correct from our SSIM -g simulator). Then the program halts with the correct output both in the "output" spot in memory and in register %edx.\
\
Note that, without instruction to do so, I did not assume that we needed to store the initial state of the registers, and thus did not implement caller or callee save unless I needed to for the functionality of my sub-routines. Except for the value of %edx, the registers will have different, non-meaningful values upon halting than they did when the "init" program started.\
\

\i \ul Testing:
\i0 \ulnone \
\
In testing this problem, I gave a variety of valid and invalid inputs to see the results.\
Some specific input values I entered (and their accompanying correct outputs) are listed below:\
\
Correct Cases (output = 1):\
01/01		Jan. 1st\
02/28		Feb 28th\
03/31		March 31\
04/20		April 20th\
\'85\
12/31		Dec. 31st\
\
Incorrect Cases (output = 2):\
00/01\
01/32		Jan. 32nd\
02/29		Feb 29th\
03/32		March 32nd\
04/42		April 42nd\
05/00		May 0th\
\'85\
12/32		Dec. 32nd\
13/01		???\
\
Error Cases (output = e):\
0a/01		INVALID BCD\
b0/01		INVALID BCD\
01/0c		INVALID BCD\
\'85\
03/f0		INVALID BCD\
\
}